plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.2.0"
	id "org.jetbrains.kotlin.plugin.serialization" version "2.2.0"
	id("com.gradleup.shadow") version "9.0.0-rc1"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
}

configurations {
	// ✅ Only this config is resolved by Shadow
	shadowRuntime {
		canBeResolved = true
		canBeConsumed = false
	}
}

dependencies {
	// Fabric setup
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-command-api-v2:${project.fabric_version}"

	// Kotlin & JSON
	implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3"
	implementation "com.google.code.gson:gson:2.8.9"

	// ✅ LWJGL is used but NOT bundled
	implementation "org.lwjgl:lwjgl-opengl:3.3.2"
	implementation "org.lwjgl:lwjgl-glfw:3.3.2"
	implementation "org.lwjgl:lwjgl:3.3.2"
	implementation (shadowRuntime "com.squareup.okhttp3:okhttp:4.12.0")

	// ✅ OkHttp is shaded
	shadowRuntime "com.squareup.okhttp3:okhttp:4.12.0"
	include "com.squareup.okhttp3:okhttp:4.12.0"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "21"
	}
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

// ✅ shadowJar only bundles OkHttp from shadowRuntime
tasks.named("shadowJar") {
	archiveClassifier.set("dev-shadow")
	configurations = [project.configurations.shadowRuntime]
	// relocate 'okhttp3', 'your.mod.shadow.okhttp3' // optional, prevents conflicts
}

// ✅ remapShadowJar produces the final mod JAR
tasks.register("remapShadowJar", net.fabricmc.loom.task.RemapJarTask) {
	dependsOn tasks.named("shadowJar")
	inputFile.set(tasks.named("shadowJar").get().archiveFile)
	archiveClassifier.set("")
	addNestedDependencies.set(true)
}

tasks.build {
	dependsOn tasks.remapShadowJar
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}" }
	}
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}
}
